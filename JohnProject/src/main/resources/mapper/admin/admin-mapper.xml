<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="admin">

	<resultMap type="com.kh.john.member.model.vo.Member" id="memberMap">
		<id property="usid" column="usid"/>
	    <id property="memEmail" column="mem_email"/>
	    <id property="memPwd" column="mem_pwd"/>
	    <id property="memName" column="mem_name"/>
	    <id property="memNickname" column="mem_nickname"/>
	    <id property="gender" column="gender"/>
	    <id property="birthday" column="birthday"/>
	    <id property="enrollDate" column="enroll_date"/>
	    <id property="point" column="point"/>
	    <id property="leaveMem" column="leave_mem"/>
	    <id property="pwIsUuid" column="pw_is_uuid"/>
	    <id property="memClass" column="mem_class"/>
	    <id property="profilePic" column="profile_pic"/>
	    <id property="tel" column="tel"/>
	</resultMap>
	<resultMap type="com.kh.john.board.model.vo.Board" id="boardMap">
		<id property="boardId" column="board_id"/>
		<id property="writerUsid" column="writer_usid"/>
		<id property="writerNickname" column="writer_nickname"/>
		<id property="title" column="title"/>
		<id property="content" column="content"/>
		<id property="enrollDate" column="enroll_date"/>
		<id property="hit" column="hit"/>
		<id property="bigCategory" column="big_category"/>
		<id property="smallCategory" column="small_category"/>
		<id property="isclose" column="isclose"/>
		<id property="maxMems" column="max_mems"/>
		<id property="agreeName" column="agree_name"/>
		<id property="disagreeName" column="disagree_name"/>
	</resultMap>
	<resultMap type="com.kh.john.admin.model.vo.Notice" id="noticeMap">
		<id property="noticeId" column="notice_id"/>
		<id property="noticeAdminUisd" column="notice_admin_uisd"/>
		<id property="noticeAdminNickname" column="notice_admin_nickname"/>
		<id property="noticeTitle" column="notice_title"/>
		<id property="noticeContent" column="notice_content"/>
		<id property="noticeEnrolldate" column="notice_enrolldate"/>
	</resultMap>
	<resultMap type="com.kh.john.admin.model.vo.NoticeFile" id="noticeFileMap">
		<id property="noticeId" column="notice_id"/>
		<id property="noticeFileName" column="notice_file_name"/>
	</resultMap>

	<resultMap type="com.kh.john.member.model.vo.License" id="licenseMap">
		<id property="licenseMemUsid" column="license_mem_usid"/>
		<id property="licenseFileName" column="license_file_name"/>
		<id property="licenseDate" column="license_date"/>
		<id property="licenseType" column="license_type"/>
		<id property="licenseCompany" column="license_company"/>
	</resultMap>
	<resultMap type="com.kh.john.admin.model.vo.AdminChat" id="adminChatMap">
		<id property="adminFirstUsid" column="admin_first_usid"/>
		<id property="adminSecondUsid" column="admin_second_usid"/>
		<id property="adminChatContent" column="admin_chat_content"/>
		<id property="adminChatDate" column="admin_chat_date"/>
		<id property="adminChatFile" column="admin_chat_file"/>
	</resultMap>
	<resultMap type="exrequest" id="expertRequestMap">
		<id column="EXPERT_REQUEST_EX_USID" property="expertRequetExUsid" />
		<id column="EXPERT_REQUEST_MEM_USID" property="expertRequestMemUsid" />
		<id column="EXPERT_REQUEST_EX_NICK" property="expertRequetExNick" />
		<id column="EXPERT_REQUEST_MEM_NICK" property="expertRequestMemNick" />
		<id column="EXPERT_ISCOUNSEL" property="expertIscounsel" />
		<id column="EXPERT_DATE" property="expertDate" />
		<id column="EXPERT_COUNSEL_TIME" property="expertCounselTime" />
		<id column="EXPERT_COUNSEL_REQUIRE" property="expertCounselRequire" />
	</resultMap>
	<resultMap type="com.kh.john.admin.model.vo.AdminMessage" id="adminMessageMap">
		<id column="admin_chat_content" property="latestMsg"/>
		<id column="admin_chat_date" property="time"/>
	</resultMap>

	<!-- 멤버관련 -->
	<select id="selectMemberList" resultMap="memberMap">
		SELECT M.*,R.REPORT_ISWARNING FROM MEMBER M LEFT OUTER JOIN REPORT R ON M.USID=R.REPORT_TARGET_USID
		WHERE MEM_CLASS LIKE ('일반유저') AND LEAVE_MEM LIKE 0
	</select>
	
	<select id="selectMemberCount" resultType="_int">
		SELECT COUNT(*) FROM
		MEMBER WHERE MEM_CLASS LIKE ('일반유저') AND LEAVE_MEM LIKE 0
	</select>

	<update id="deleteMember"
		parameterType="com.kh.john.member.model.vo.Member">
		UPDATE MEMBER SET LEAVE_MEM=1
		WHERE USID=#{usid}
	</update>

	<select id="searchMemberList" resultMap="memberMap" parameterType="map">
		SELECT M.*,R.REPORT_ISWARNING FROM MEMBER M LEFT OUTER JOIN REPORT R ON M.USID=R.REPORT_TARGET_USID 
		WHERE 1=1 
		<if test="searchType !=null and keyword !=null">
			<if test='(searchType eq "mem_name") or (searchType eq "mem_email") or (searchType eq "mem_nickname")'>
			AND ${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>

		<if test="gender !=null">
			<if test='(gender eq "M") or (gender eq "F")'>
				AND GENDER = #{gender, jdbcType=VARCHAR}
			</if>
		</if>

		<if test="memClass!=null">
			<if test='(memClass eq "일반유저") or (memClass eq "예비전문가") or (memClass eq "전문가")'>
				AND MEM_CLASS IN
				<foreach collection="memClass" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>
		</if>

		<if test="leaveMem!=null">
			<if test='(leaveMem eq "0") or (leaveMem eq "1")'>
				AND LEAVE_MEM IN
				<foreach collection="leaveMem" item="a" index="i" open="("
					close=")" separator=","> #{a, jdbcType=INTEGER}
				</foreach>
			</if>
		</if>

	</select>

	<select id="searchMemberListCount" resultType="_int"
		parameterType="map">
		<!-- SELECT COUNT(*) FROM MEMBER WHERE '${type}' LIKE
		'%'||#{keyword, jdbcType=VARCHAR}||'%'  -->
		SELECT COUNT(*) FROM MEMBER WHERE 1=1 
		
		<if test="searchType !=null and keyword !=null">
			<if test='(searchType eq "mem_name") or (searchType eq "mem_email") or (searchType eq "mem_nickname")'>
			AND ${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>

		<if test="gender !=null">
			<if test='(gender eq "M") or (gender eq "F")'>
				AND GENDER = #{gender, jdbcType=VARCHAR}
			</if>
		</if>

		<if test="memClass!=null">
			<if test='(memClass eq "일반유저") or (memClass eq "예비전문가") or (memClass eq "전문가")'>
				AND MEM_CLASS IN
				<foreach collection="memClass" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>
		</if>

		<if test="leaveMem!=null">
			<if test='(leaveMem eq "0") or (leaveMem eq "1")'>
				AND LEAVE_MEM IN
				<foreach collection="leaveMem" item="a" index="i" open="("
					close=")" separator=","> #{a, jdbcType=INTEGER}
				</foreach>
			</if>
		</if>
	
	</select>
	
 	<select id="selectMemberById" resultType="member" parameterType="member" >
		SELECT M.*,R.REPORT_ISWARNING FROM MEMBER M LEFT OUTER JOIN REPORT R ON M.USID=R.REPORT_TARGET_USID
		WHERE MEM_CLASS LIKE ('일반유저') AND LEAVE_MEM LIKE 0 AND MEM_EMAIL=#{memEmail}
	</select>
	

	<!-- 게시판관련 -->
	<select id="selectBoardList" resultMap="boardMap">
		SELECT * FROM BOARD ORDER BY BOARD_ID
	</select>
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
	</select>
	
	<select id="searchBoardList" parameterType="map"
		resultType="board" resultMap="boardMap">
		SELECT * FROM BOARD B, MEMBER M WHERE B.WRITER_USID=M.USID AND 1=1 
		
		<if test="searchType !=null and keyword !=null" >
			<if test='(searchType eq "mem_email") or (searchType eq "mem_name")'>
			AND M.${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
			<if test='searchType eq "title"'>
			AND B.${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>
		
		
		<if test="isclose!=null " >
			<if test='(isclose eq "0") or (isclose eq "1")'>
				AND B.ISCLOSE IN
				<foreach collection="isclose" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>
		</if>
		
		<if test='bigCategory!=null and (bigCategory neq "대분류")' >
			AND B.BIG_CATEGORY LIKE '%'||#{bigCategory, jdbcType=VARCHAR}||'%'
		</if>
		
		<if test='smallCategory!=null and (smallCategory neq "소분류")' >
			AND B.SMALL_CATEGORY LIKE '%'||#{smallCategory, jdbcType=VARCHAR}||'%'
		</if>
		
		<if test='searchType2 != null  and (order eq "ascend".toString())'>
			ORDER BY B.${searchType2} ASC
		</if>
		
		<if test='searchType2 != null  and(order eq "descend".toString())'>
			ORDER BY B.${searchType2} DESC
		</if>
		
	</select>

	<!-- <select id="searchBoardListCount" resultType="_int"
		parameterType="map">
		SELECT COUNT(*) FROM BOARD B, MEMBER M WHERE 1=1 AND
		B.WRITER_USID=M.USID AND '${type}' LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		<if test="bigCategory!=null" >
			AND B.BIG_CATEGORY LIKE '%'||#{bigCategory, jdbcType=VARCHAR}||'%'
		</if>
		
	</select> -->

 		<select id="searchBoardListCount" resultType="_int" parameterType="map">
 		SELECT COUNT(*) FROM BOARD B, MEMBER M WHERE B.WRITER_USID=M.USID AND 1=1
 		<if test="searchType !=null and keyword !=null">
			<if test='(searchType eq "mem_email") or (searchType eq "mem_name")'>
			AND M.${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
			<if test='searchType eq "title"'>
			AND B.${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>
		
		
		<if test="isclose!=null " >
			<if test='(isclose eq "0") or (isclose eq "1")'>
				AND B.ISCLOSE IN
				<foreach collection="isclose" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>

		</if>
		
		<if test='bigCategory!=null and (bigCategory neq "대분류")' >
			AND B.BIG_CATEGORY LIKE '%'||#{bigCategory, jdbcType=VARCHAR}||'%'
		</if>
		
		<if test='smallCategory!=null and (smallCategory neq "소분류")' >
			AND B.SMALL_CATEGORY LIKE '%'||#{smallCategory, jdbcType=VARCHAR}||'%'
		</if>
		
		<if test='searchType2 != null  and (order eq "ascend".toString())'>
			ORDER BY B.${searhcType2} ASC
		</if>
		
		<if test='searchType2 != null  and(order eq "descend".toString())'>
			ORDER BY B.${searchType2} DESC
		</if>
		</select>


	<!-- 전문가관련 -->
	<select id="selectExpertList" resultMap="memberMap">
		SELECT * FROM MEMBER
		WHERE MEM_CLASS LIKE ('전문가') AND LEAVE_MEM LIKE 0
	</select>
	<select id="selectExpertCount" resultType="_int">
		SELECT COUNT(*) FROM
		MEMBER WHERE MEM_CLASS LIKE ('전문가') AND LEAVE_MEM LIKE 0
	</select>

	<select id="selectBeforeExpertList" resultMap="memberMap">
		SELECT * FROM
		MEMBER WHERE MEM_CLASS LIKE('예비전문가') AND LEAVE_MEM LIKE 0
	</select>
	<select id="selectBeforeExpertCount" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER WHERE MEM_CLASS LIKE('예비전문가') AND LEAVE_MEM LIKE 0
	</select>

	<select id="updateMemberToExpert" parameterType="map" resultMap="memberMap">
		
		SELECT * FROM MEMBER M WHERE USID=#{usid}
		
	</select>
	
	<select id="updateMemberToExpertLicense" parameterType="map" resultMap="licenseMap">
	
		SELECT * FROM LICENSE L, MEMBER M WHERE L.LICENSE_MEM_USID = M.USID 
		AND USID=#{usid} 
		
	</select>

	<select id="searchExpertList" parameterType="map"
		resultType="member" resultMap="memberMap">
		SELECT * FROM MEMBER WHERE 1=1 AND MEM_CLASS LIKE('전문가') 
		
		<if test="searchType !=null and keyword !=null">
			<if test='(searchType eq "mem_name") or (searchType eq "mem_email") or (searchType eq "mem_nickname")'>
			AND ${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>

		<if test="gender !=null">
			<if test='(gender eq "M") or (gender eq "F")'>
				AND GENDER = #{gender, jdbcType=VARCHAR}
			</if>
		</if>

		<if test="memClass!=null">
			<if test='(memClass eq "일반유저") or (memClass eq "예비전문가") or (memClass eq "전문가")'>
				AND MEM_CLASS IN
				<foreach collection="memClass" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>
		</if>

		<if test="leaveMem!=null">
			<if test='(leaveMem eq "0") or (leaveMem eq "1")'>
				AND LEAVE_MEM IN
				<foreach collection="leaveMem" item="a" index="i" open="("
					close=")" separator=","> #{a, jdbcType=INTEGER}
				</foreach>
			</if>
		</if>
		
		<if test='serachType2 != null  and (order eq "ascend".toString())'>
			ORDER BY ${searchType2} ASC
		</if>
		
		<if test='searchType2 != null  and(order eq "descend".toString())'>
			ORDER BY ${searchType2} DESC
		</if>
		
	</select>

	<select id="searchExpertListCount" resultType="_int"
		parameterType="map" >
<!-- 		SELECT COUNT(*) FROM MEMBER WHERE '${type2}' LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
		AND MEM_CLASS LIKE('전문가')-->
		SELECT COUNT(*) FROM MEMBER WHERE MEM_CLASS LIKE('전문가') AND 1=1
		
		<if test="searchType !=null and keyword !=null">
			<if test='(searchType eq "mem_name") or (searchType eq "mem_email") or (searchType eq "mem_nickname")'>
				AND ${searchType} LIKE '%'||#{keyword, jdbcType=VARCHAR}||'%'
			</if>
		</if>

		<if test="gender !=null">
			<if test='(gender eq "M") or (gender eq "F")'>
				AND GENDER = #{gender, jdbcType=VARCHAR}
			</if>
		</if>

		<if test="memClass!=null">
			<if test='(memClass eq "일반유저") or (memClass eq "예비전문가") or (memClass eq "전문가")'>
				AND MEM_CLASS IN
				<foreach collection="memClass" item="v" index="i" open="("
					close=")" separator=","> #{v, jdbcType=VARCHAR}
				</foreach>
			</if>
		</if>

		<if test="leaveMem!=null">
			<if test='(leaveMem eq "0") or (leaveMem eq "1")'>
				AND LEAVE_MEM IN
				<foreach collection="leaveMem" item="a" index="i" open="("
					close=")" separator=","> #{a, jdbcType=INTEGER}
				</foreach>
			</if>
		</if>
		
		<if test='searchType2 != null  and (order eq "ascend".toString())'>
			ORDER BY ${searchType2} ASC
		</if>
		
		<if test='searchType2 != null  and(order eq "descend".toString())'>
			ORDER BY ${searchType2} DESC
		</if>
	</select>
	
	<update id="updateMemberToExpertEnd" parameterType="member">
		UPDATE MEMBER SET MEM_CLASS='전문가'
		WHERE USID=#{usid}
	</update>
	
	<select id="selectAdminExpertCounsel0" resultMap="expertRequestMap">
		SELECT * FROM EXPERT_REQUEST WHERE EXPERT_ISCOUNSEL=0
	</select>
	
	<select id="selectAdminExpertCounsel1" resultMap="expertRequestMap">
		SELECT * FROM EXPERT_REQUEST WHERE EXPERT_ISCOUNSEL=1
	</select>
	
	<select id="selectAdminExpertCounselCount0" resultType="_int">
		SELECT COUNT(*) FROM EXPERT_REQUEST WHERE EXPERT_ISCOUNSEL=0
	</select> 
	
	<select id="selectAdminExpertCounselCount1" resultType="_int">
		SELECT COUNT(*) FROM EXPERT_REQUEST WHERE EXPERT_ISCOUNSEL=1
	</select> 
	
	<!-- 공지관련 -->
	<select id="selectNoticeList" resultMap="noticeMap"> 
		SELECT A.*,(SELECT COUNT(*) FROM NOTICE_FILE WHERE NOTICE_ID=A.NOTICE_ID) AS FILECOUNT
		FROM NOTICE A ORDER BY NOTICE_ENROLLDATE DESC
	</select> 
	
	<select id="selectNoticeCount" resultType="_int"> 
		SELECT COUNT(*) FROM NOTICE 
	</select>
	
	<select id="insertNotice" parameterType="notice">
		INSERT INTO NOTICE VALUES(SEQ_NOTICE_NO.NEXTVAL,31,'관리자',#{noticeTitle},#{noticeContent},SYSDATE) 
		
	</select>
	
	<insert id="insertNoticeFile" parameterType="noticeFile">
		INSERT INTO NOTICE_FILE VALUES(#{noticeId},#{noticeFileName})
	
		<selectKey keyProperty="noticeId" resultType="_int" order="BEFORE"> SELECT SEQ_NOTICE_NO.CURRVAL FROM DUAL </selectKey>
	</insert>
	
	<select id="selectOneNotice" parameterType="_int" resultType="notice" resultMap="noticeMap">
		SELECT * FROM NOTICE WHERE NOTICE_ID=#{noticeId}
	</select>
	
	<select id="selectNoticeFile" parameterType="_int" resultType="noticeFile" resultMap="noticeFileMap">
		SELECT * FROM NOTICE_FILE WHERE NOTICE_ID=#{noticeId}
	</select>
	
	<select id="noticeModify" parameterType="map" resultMap="noticeMap">
		SELECT * FROM NOTICE WHERE NOTICE_ID=#{noticeId}
	</select>
	
	<update id="noticeModifyEnd" parameterType="notice">
		UPDATE NOTICE SET NOTICE_TITLE=#{noticeTitle},
										NOTICE_CONTENT=#{noticeContent},
										NOTICE_ID=#{noticeId},
										NOTICE_ADMIN_NICKNAME=#{noticeAdminNickname}
		WHERE NOTICE_ID=#{noticeId}
	</update>

	<update id="noticeModifyFile" parameterType="noticeFile">
		UPDATE NOTICE_FILE SET NOTICE_FILE_NAME=#{noticeFileName} WHERE NOTICE_ID=#{noticeId}	
	</update>
	
	
	<delete id="deleteNotice" parameterType="notice">
		DELETE FROM NOTICE WHERE NOTICE_ID=#{noticeId}
	</delete>
 
 
	<!-- 1:1 문의 관련 -->
 
 	<insert id="insertAdminChat" parameterType="adminChat">
 		INSERT INTO ADMIN_CHAT VALUES(#{adminFirstUsid},#{adminSecondUsid},#{adminChatContent},#{adminChatDate},#{adminChatFile})
 	</insert>

 	<select id="selectAdminChat" resultType="List" resultMap="adminChatMap">
		SELECT ADMIN_FIRST_USID FROM ADMIN_CHAT WHERE ADMIN_FIRST_USID!=31 GROUP BY ADMIN_FIRST_USID
 	</select>
 		
 	<select id="selectAdminChatCount" resultType="_int">
 		SELECT COUNT(*) FROM ADMIN_CHAT 
 	</select>
 	
 	<select id="selectAdminInChat" resultType="List" resultMap ="adminChatMap">
 		SELECT * FROM ADMIN_CHAT ORDER BY ADMIN_CHAT_DATE ASC
 	</select> 	
 	
 	<select id="firstUsidList" resultType="integer">
 		SELECT ADMIN_FIRST_USID FROM ADMIN_CHAT WHERE ADMIN_SECOND_USID=31 GROUP BY ADMIN_FIRST_USID
 	</select>
 	
	<select id="secondUsidList" resultType="integer">
 		SELECT ADMIN_SECOND_USID FROM ADMIN_CHAT WHERE ADMIN_FIRST_USID=31 GROUP BY ADMIN_SECOND_USID
 	</select>
 	
 	<select id="loadAdminMessage" resultMap="adminMessageMap">
 		SELECT ROWNUM, X.* FROM 
      (SELECT Y.* FROM ADMIN_CHAT Y WHERE (ADMIN_FIRST_USID=#{adminUsid} AND ADMIN_SECOND_USID=#{memberUsid}) 
      OR (ADMIN_FIRST_USID=#{memberUsid} AND ADMIN_SECOND_USID=#{adminUsid}) ORDER BY ADMIN_CHAT_DATE DESC) X WHERE ROWNUM=1
 	</select>
</mapper>
